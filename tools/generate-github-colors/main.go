package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"sort"

	"gopkg.in/yaml.v3"
)

func main() {
	// Get GitHub languages information.
	url := "https://raw.githubusercontent.com/github/linguist/master/lib/linguist/languages.yml"
	fmt.Printf("getting GitHub languages from %s\n", url)
	resp, err := http.Get(url)
	if err != nil {
		log.Fatalf("unable to get GitHub languages: %v", err)
	}
	defer resp.Body.Close()

	var values map[string]interface{}
	err = yaml.NewDecoder(resp.Body).Decode(&values)
	if err != nil {
		log.Fatalf("unmarshal: %v", err)
	}

	languages := make([]string, 0, len(values))
	languageToColor := make(map[string]string)
	for language, value := range values {
		valueMap, ok := value.(map[string]interface{})
		if !ok {
			continue
		}
		color, exists := valueMap["color"].(string)
		if !exists {
			group, exists := valueMap["group"].(string)
			if !exists {
				continue
			}
			groupValue, exists := values[group].(map[interface{}]interface{})
			if !exists {
				continue
			}
			color, exists = groupValue["color"].(string)
			if !exists {
				continue
			}
		}
		languages = append(languages, language)
		languageToColor[language] = color
	}
	sort.Strings(languages)

	// Generate Go code.
	code := "// This is an auto generated file. Do not edit this file manually.\n"
	code += "package card\n\n"
	code += "// LanguageToColor is a map of GitHub languages to their respective colors.\n"
	code += "var LanguageToColor = map[string]string{\n"
	for _, language := range languages {
		code += fmt.Sprintf("\t%q: %q,\n", language, languageToColor[language])
	}
	code += "}\n"

	// Write Go code to the file.
	cwd, err := os.Getwd()
	if err != nil {
		log.Fatalf("unable to get current working directory: %v", err)
	}
	outFile := filepath.Join(cwd, "internal/card/language.go")
	if err = os.WriteFile(outFile, []byte(code), 0644); err != nil /* #nosec G306 */ {
		log.Fatalf("unable to write file: %v", err)
	}
	fmt.Printf("code has been successfully written to %s\n", outFile)
}
